/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_STUDENTCOLLECTIONSTUB_H_
#define JSONRPC_CPP_STUB_STUDENTCOLLECTIONSTUB_H_

#include <jsonrpccpp/client.h>

class studentcollectionstub : public jsonrpc::Client
{
    public:
        studentcollectionstub(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}

        bool saveToJsonFile() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("saveToJsonFile",p);
            if (result.isBool())
                return result.asBool();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        bool resetFromJsonFile() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("resetFromJsonFile",p);
            if (result.isBool())
                return result.asBool();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        bool add(const Json::Value& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("add",p);
            if (result.isBool())
                return result.asBool();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        bool remove(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("remove",p);
            if (result.isBool())
                return result.asBool();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value get(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("get",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value getNames() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("getNames",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string getById(int param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("getById",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
};

#endif //JSONRPC_CPP_STUB_STUDENTCOLLECTIONSTUB_H_
